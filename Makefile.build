TAG_POSTFIX=
TAG_DATE=-$(shell date +"%Y-%m-%d")

# Check if there is a specific rust nightly date given and adjust the variables accordingly
ifeq ($(findstring nightly-20,$(RUST_CHANNEL)),nightly-20)
	TAG_POSTFIX=-$(RUST_CHANNEL)
	TAG_DATE=
else ifeq ($(RUST_CHANNEL),nightly)
	TAG_POSTFIX=-nightly
	RUST_CHANNEL=nightly$(TAG_DATE)
endif

# Pull the latest gnu-base to be used as cache if possible
# Build the gnu-base image using the previous image as cache
build-gnu:
	docker pull blackdex/rust-musl:gnu-base || true
	docker build \
		--cache-from blackdex/rust-musl:gnu-base \
		-f Dockerfile.gnu-base \
		-t blackdex/rust-musl:gnu-base \
		-t blackdex/rust-musl:gnu-base$(TAG_DATE) \
		"."
	if [ -n "$$PUSH" ] && [ "$$PUSH" = "true" ]; then \
		docker push blackdex/rust-musl:gnu-base ; \
		docker push blackdex/rust-musl:gnu-base$(TAG_DATE) ; \
	fi

# Build and push all musl targets
build-push-gnu:
	$(MAKE) PUSH=true build-gnu

# Define specific target variables
build-musl-x86_64: TARGET=x86_64-unknown-linux-musl
build-musl-x86_64: OPENSSL_ARCH=linux-x86_64
build-musl-x86_64: TAG=x86_64-musl

build-musl-aarch64: TARGET=aarch64-unknown-linux-musl
build-musl-aarch64: OPENSSL_ARCH=linux-aarch64
build-musl-aarch64: TAG=aarch64-musl

build-musl-armv7: TARGET=armv7-unknown-linux-musleabihf
build-musl-armv7: OPENSSL_ARCH=linux-armv4
build-musl-armv7: TAG=armv7-musleabihf

build-musl-arm: TARGET=arm-unknown-linux-musleabi
build-musl-arm: OPENSSL_ARCH=linux-armv4
build-musl-arm: TAG=arm-musleabi

build-musl-armhf: TARGET=arm-unknown-linux-musleabihf
build-musl-armhf: OPENSSL_ARCH=linux-armv4
build-musl-armhf: TAG=arm-musleabihf

build-musl-armv5te: TARGET=armv5te-unknown-linux-musleabi
build-musl-armv5te: OPENSSL_ARCH=linux-armv4
build-musl-armv5te: TAG=armv5te-musleabi

# Pull the latest musl-base to be used as cache if possible
# Build the gnu-base image using the previous image as cache
# For the musl image we use multi-stage docker images.
# So first we build the musl-base part, and after that we will build the the main image.
build-musl-x86_64 build-musl-aarch64 build-musl-armv7 build-musl-arm build-musl-armhf build-musl-armv5te:
	set -e
	docker pull blackdex/rust-musl:musl-base-$(TAG) || true
	docker build \
		--build-arg TARGET=$(TARGET) \
		--build-arg OPENSSL_ARCH=$(OPENSSL_ARCH) \
		--target musl-base \
		--cache-from blackdex/rust-musl:musl-base-$(TAG) \
		-t blackdex/rust-musl:musl-base-$(TAG) \
		-f Dockerfile.musl-base \
		"."
	docker build \
		--build-arg TARGET=$(TARGET) \
		--build-arg OPENSSL_ARCH=$(OPENSSL_ARCH) \
		--build-arg RUST_CHANNEL=$(RUST_CHANNEL) \
		--cache-from blackdex/rust-musl:musl-base-$(TAG) \
		-t blackdex/rust-musl:$(TAG)$(TAG_POSTFIX) \
		-t blackdex/rust-musl:$(TAG)$(TAG_POSTFIX)$(TAG_DATE) \
		-f Dockerfile.musl-base \
		"."
	if [ -n "$$PUSH" ] && [ "$$PUSH" = "true" ]; then \
		docker push blackdex/rust-musl:musl-base-$(TAG) ; \
		docker push blackdex/rust-musl:$(TAG)$(TAG_POSTFIX) ; \
		docker push blackdex/rust-musl:$(TAG)$(TAG_POSTFIX)$(TAG_DATE) ; \
	fi

# Target to build all cross toolchains supported
build-musl: build-musl-x86_64 build-musl-aarch64 build-musl-armv7 build-musl-arm build-musl-armhf build-musl-armv5te

# Build and push all musl targets
build-push-musl:
	$(MAKE) PUSH=true build-musl

# Build and push a specific targets
build-push-musl-%:
	$(MAKE) PUSH=true "$(subst push-,,$@)"

# Pull the latest toolchains to be used as cache if possible
# Build the toolchains image using the previous image as cache
build-toolchains:
	docker pull blackdex/rust-musl:toolchains || true
	docker build \
		--cache-from blackdex/rust-musl:toolchains \
		-t blackdex/rust-musl:toolchains \
		-t blackdex/rust-musl:toolchains$(TAG_DATE) \
		-f Dockerfile.toolchains \
		"."
	if [ -n "$$PUSH" ] && [ "$$PUSH" = "true" ]; then \
		docker push blackdex/rust-musl:toolchains ; \
		docker push blackdex/rust-musl:toolchains$(TAG_DATE) ; \
	fi

# Build and push all musl-cross targets
build-push-toolchains:
	$(MAKE) PUSH=true build-toolchains

build: build-gnu build-musl
build-push: build-push-gnu build-push-musl

build-all: build-toolchain build-gnu build-musl
build-push-all: build-push-toolchain build-push-gnu build-push-musl
