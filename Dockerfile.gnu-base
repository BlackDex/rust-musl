# syntax=docker/dockerfile:1

# This file was generated using a Jinja2 template.
# Please make your changes in `Dockerfile.j2` and then `make render` to generate the base files.
FROM ubuntu:20.04
LABEL maintainer="Mathijs van Veluw <rust@mathijsvanveluw.nl>"
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    TERM=xterm-256color \
    HOST_PREFIX=/usr/local/gnu \
    HOST_PKG_CONFIG_PATH=/usr/local/gnu/lib/pkgconfig \
    HOST_LD=x86_64-linux-gnu-ld \
    HOST_CC=x86_64-linux-gnu-gcc \
    TZ=UTC

# hadolint ignore=DL3008
RUN mkdir -p "${HOST_PREFIX}" && \
    apt-get update && \
    apt-get install -y \
        autoconf \
        automake \
        build-essential \
        cmake \
        libtool \
        pkg-config \
        curl \
        file \
        git \
        tzdata \
        ca-certificates \
        --no-install-recommends \
        && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    # Default cleanups
    find /var/log -type f -delete

ENV SSL_VER="1.1.1l" \
    CURL_VER="7.80.0" \
    ZLIB_VER="1.2.11" \
    PQ_VER="11.13" \
    SQLITE_VER="3360000" \
    MARIADB_VER="3.1.15"

WORKDIR /tmp

# Build zlib (used in openssl, curl, pq, sqlite and mariadb)
# hadolint ignore=DL3003
RUN echo "zlib" && \
    curl -sSL "https://zlib.net/zlib-${ZLIB_VER}.tar.gz" | tar xz && \
    cd "zlib-${ZLIB_VER}" && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
    ./configure \
      --prefix="${HOST_PREFIX}" && \
    make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "zlib-${ZLIB_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

# Build openssl (used in curl, pq and mariadb)
# hadolint ignore=DL3003
RUN echo "OpenSSL" && \
    curl -sSL "https://www.openssl.org/source/openssl-${SSL_VER}.tar.gz" | tar xz && \
    cd "openssl-${SSL_VER}" && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
    ./Configure \
      linux-x86_64 enable-ec_nistp_64_gcc_128 \
      no-ssl3 \
      -fPIC \
      --openssldir="${HOST_PREFIX}/ssl" \
      --prefix="${HOST_PREFIX}" && \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" make -j"$(nproc)" depend && \
    make -j"$(nproc)" && \
    make install_sw install_ssldirs && \
    cd /tmp && rm -rf "openssl-${SSL_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

# Build curl (needs with-zlib and all this stuff to allow https)
# hadolint ignore=DL3003
RUN echo "libcurl" && \
    curl -sSL "https://curl.se/download/curl-${CURL_VER}.tar.gz" | tar xz && \
    cd "curl-${CURL_VER}" && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
    ./configure \
      --with-zlib \
      --with-openssl \
      --enable-optimize \
      --with-ca-path=/etc/ssl/certs/ \
      --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
      --with-ca-fallback \
      --prefix="${HOST_PREFIX}" && \
    make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "curl-${CURL_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

# Build libpq
# hadolint ignore=DL3003
RUN echo "PostgreSQL" && \
    curl -sSL "https://ftp.postgresql.org/pub/source/v${PQ_VER}/postgresql-${PQ_VER}.tar.gz" | tar xz && \
    cd "postgresql-${PQ_VER}" && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
   ./configure \
      --without-readline \
      --with-openssl \
      --disable-rpath \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${HOST_PREFIX}" && \
    # build libpq only
    cd src/interfaces/libpq && \
      make -j"$(nproc)" && \
      make -j"$(nproc)" install && \
    cd /tmp && rm -rf "postgresql-${PQ_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

# Build libsqlite3
# hadolint ignore=DL3003
RUN echo "SQLite3" && \
    curl -sSL "https://www.sqlite.org/2021/sqlite-autoconf-${SQLITE_VER}.tar.gz" | tar xz && \
    cd "sqlite-autoconf-${SQLITE_VER}" && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
    CFLAGS="-DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS3_TOKENIZER=1 -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_SECURE_DELETE -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_USE_URI -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_MAX_VARIABLE_NUMBER=250000 -DSQLITE_MAX_EXPR_DEPTH=10000" \
    ./configure \
      --enable-threadsafe \
      --enable-fts3 \
      --enable-fts4 \
      --enable-fts5 \
      --enable-rtree \
      --enable-json1 \
      --enable-dynamic-extensions \
      --prefix="${HOST_PREFIX}" && \
    # rpath removal - Same as Alpine
    sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool && \
    sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool && \
    make && make install && \
    cd /tmp && rm -rf "sqlite-autoconf-${SQLITE_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

# Building mariadb
# hadolint ignore=DL3003
RUN echo "MariaDB Connector/C" && \
    curl -sSL "https://ftp.nluug.nl/db/mariadb/connector-c-${MARIADB_VER}/mariadb-connector-c-${MARIADB_VER}-src.tar.gz" | tar xz && \
    cd "mariadb-connector-c-${MARIADB_VER}-src" && \
    mkdir build && cd build && \
    PKG_CONFIG_PATH="${HOST_PKG_CONFIG_PATH}" \
    LD="${HOST_LD}" \
    LDFLAGS="-L${HOST_PREFIX}/lib" \
    CPPFLAGS="-I${HOST_PREFIX}/include" \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" \
    CC="${HOST_CC} -fPIC" \
    cmake \
      -DCMAKE_IGNORE_PATH="/usr/include" \
      -DCMAKE_INSTALL_PREFIX="${HOST_PREFIX}" \
      -DCMAKE_SYSTEM_NAME=Linux \
      -DCMAKE_HOST_SYSTEM_NAME=Linux \
      -DINSTALL_LIBDIR=lib \
      -DINSTALL_INCLUDEDIR=include/mysql \
      -DCMAKE_BUILD_TYPE=MINSIZEREL \
      -DWITH_EXTERNAL_ZLIB=ON \
      -DWITH_SSL=OPENSSL \
      -DWITH_MYSQLCOMPAT=ON \
      -DWITH_UNIT_TESTS=OFF \
      -DCLIENT_PLUGIN_DIALOG=STATIC \
      -DCLIENT_PLUGIN_MYSQL_CLEAR_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CACHING_SHA2_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_SHA256_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CLIENT_ED25519=STATIC \
      -DCLIENT_PLUGIN_REMOTE_IO=OFF \
      -DDEFAULT_CHARSET=utf8mb4 \
    ../ && \
    C_INCLUDE_PATH="${HOST_PREFIX}/include" make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "mariadb-connector-c-${MARIADB_VER}-src" && \
    # Create some compatibilty symlinks so pkg-config and diesel can find all the correct files
    ln -sfnr "${HOST_PREFIX}/bin/mariadb_config" "${HOST_PREFIX}/bin/mysql_config" && \
    ln -sfnr "${HOST_PREFIX}/include/mysql/mariadb_version.h" "${HOST_PREFIX}/include/mysql/mysql_version.h" && \
    # Create and fix the default pkg-config for mysqlclient using the libmariadb generated file
    # We need the library to point to mysqlclient instead of mariadb, else mysqlclient-sys crate will not link it statically!
    sed "s#Name: libmariadb#Name: mysqlclient#g" "${HOST_PREFIX}/lib/pkgconfig/libmariadb.pc" | \
      sed "s#${HOST_PREFIX}/lib/lib##g" | \
      sed 's#\.a##g' | \
      sed 's#-lmariadb#-lmysqlclient#g' > "${HOST_PREFIX}/lib/pkgconfig/mysqlclient.pc" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${HOST_PREFIX}/share/man"

ENV PKG_CONFIG_PATH_x86_64_unknown_linux_gnu="${HOST_PKG_CONFIG_PATH}" \
    PKG_CONFIG_LIBDIR_x86_64_unknown_linux_gnu="${HOST_PREFIX}/lib" \
    #
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
    SSL_CERT_DIR=/etc/ssl/certs

WORKDIR /home/rust/src

LABEL maintainer="BlackDex <black.dex@gmail.com>"
LABEL org.opencontainers.image.create="$(date --utc --iso-8601=seconds)"
LABEL org.opencontainers.image.documentation="https://github.com/BlackDex/rust-musl/"
LABEL org.opencontainers.image.licenses="Apache License 2.0"
LABEL org.opencontainers.image.url="https://hub.docker.com/r/blackdex/rust-musl/"
