on:
  push:
    paths:
      - ".github/workflows/toolchain.yml"
      - "Dockerfile.toolchain"
      - "config.mak"
      - "config32.mak"
      - "shared.mak"
    branches:
      - main
      - workflow-test

  pull_request:
    paths:
    - ".github/workflows/toolchain.yml"
    - "Dockerfile.toolchain"
    - "config.mak"
    - "config32.mak"
    - "shared.mak"

  workflow_dispatch:
    inputs:
      clean_cache:
        description: Clean Docker cache before build, yes/no
        default: 'no'
        required: false
  # schedule:
  #   - cron: '0 0 1 */2 *'

name: Build Toolchains

jobs:
  toolchain:
    name: Build Toolchain - ${{ matrix.env.IMAGE_TAG }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # ARCH_COMMON_CONFIG are based upon the `"COMMON_CONFIG +=` additions extracted
        # from the MUSL Dockerfiles here: https://github.com/rust-embedded/cross/tree/master/docker
        env:
          - IMAGE_TAG: x86_64-musl
            TARGET: x86_64-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak
          - IMAGE_TAG: armv7-musleabihf
            TARGET: armv7-unknown-linux-musleabihf
            RUST_MUSL_MAKE_CONFIG: config32.mak
            ARCH_COMMON_CONFIG: "--with-arch=armv7-a --with-float=hard --with-mode=thumb --with-fpu=vfp"
          - IMAGE_TAG: aarch64-musl
            TARGET: aarch64-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak
          - IMAGE_TAG: arm-musleabi
            TARGET: arm-unknown-linux-musleabi
            RUST_MUSL_MAKE_CONFIG: config32.mak
            ARCH_COMMON_CONFIG: "--with-arch=armv6 --with-float=soft --with-mode=arm"
          - IMAGE_TAG: arm-musleabihf
            TARGET: arm-unknown-linux-musleabihf
            RUST_MUSL_MAKE_CONFIG: config32.mak
            ARCH_COMMON_CONFIG: "--with-arch=armv6 --with-float=hard --with-mode=arm --with-fpu=vfp"
          - IMAGE_TAG: armv5te-musleabi
            TARGET: armv5te-unknown-linux-musleabi
            RUST_MUSL_MAKE_CONFIG: config32.mak
            ARCH_COMMON_CONFIG: "--with-arch=armv5te --with-float=soft --with-mode=arm"
    env: ${{ matrix.env }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        # Do not run when using act
        if: ${{ !env.ACT }}
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-toolchain-${{ matrix.env.TARGET }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-toolchain-${{ matrix.env.TARGET }}-buildx-

      - name: Clean Docker cache
        # Do not run when using act or when the commit message contains '[clean cache]' or via triggered via workflow input
        if: |
          !env.ACT &&
          (contains(github.event.head_commit.message, '[clean cache]') || github.event.inputs.clean_cache == 'yes')
        continue-on-error: true
        run: |
          rm -rf /tmp/.buildx-cache

      - name: Determine Docker Date Tag
        id: vars
        shell: bash
        run: |
          # Get the current date
          echo "set-output name=TAG_DATE::$(date +'-%Y-%m-%d')"
          echo "::set-output name=TAG_DATE::$(date +'-%Y-%m-%d')"

      - name: Docker Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.toolchain
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            ARCH_COMMON_CONFIG=${{ matrix.env.ARCH_COMMON_CONFIG }}
            RUST_MUSL_MAKE_CONFIG=${{ matrix.env.RUST_MUSL_MAKE_CONFIG }}
          tags: |
            blackdex/musl-toolchain:${{ matrix.env.IMAGE_TAG }}
            blackdex/musl-toolchain:${{ matrix.env.IMAGE_TAG }}${{ steps.vars.outputs.TAG_DATE }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        # Do not run when using act
        if: ${{ !env.ACT }}
        run: |
          # Temp fix
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # - name: Test Docker cargo build
      #   run: |
      #     docker run --rm \
      #       -v "$(pwd)/test/dieselmulticrate":/home/rust/src \
      #       -e RUST_BACKTRACE=1 \
      #       -e RUSTFLAGS='-C link-arg=-s' \
      #       blackdex/rust-musl:arm-musleabihf cargo build

      # - name: Build and push multiarch image
      #   if: github.ref == 'refs/heads/master'
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #     docker push messense/rust-musl-cross:$IMAGE_TAG

      #     echo "image: messense/rust-musl-cross:$IMAGE_TAG
      #     manifests:
      #       - image: messense/rust-musl-cross:$IMAGE_TAG-amd64
      #         platform:
      #           architecture: amd64
      #           os: linux
      #       - image: messense/rust-musl-cross:$IMAGE_TAG-arm64
      #         platform:
      #           architecture: arm64
      #           os: linux
      #     " > manifest.yaml

      #     curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux
      #     chmod +x manifest-tool
      #     ./manifest-tool push from-spec manifest.yaml
