on:
  push:
    paths:
      - ".github/workflows/rust-musl.yml"
      - "Dockerfile.gnu-base"
      - "Dockerfile.musl-base"
    branches:
      - main
      # - workflow-test

  schedule:
    - cron: '30 9 * * *' # everyday at 9:30am

name: Rust MUSL

jobs:
  build_vars:
    name: Generate Build Variables
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.build_vars.outputs.date }}
      act: ${{ steps.build_vars.outputs.act }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      # Check if this is a scheduled job, if so, set to nightly
      - name: Get build variables
        id: build_vars
        run: |
          #
          # Add env.ACT as an output since GHA does not support env within if checks on some locations
          # See: https://github.com/actions/runner/issues/480
          echo "set-output name=act::${ACT}"
          echo "::set-output name=act::${ACT}"
          #
          # Date
          export DATE=$(date +'%Y-%m-%d')
          echo "set-output name=date::${DATE}"
          echo "::set-output name=date::${DATE}"
          #

  gnu-base:
    name: Build GNU Base Image
    runs-on: ubuntu-latest
    needs: build_vars
    # Only rebuild the gnu-base if there were changes to the Dockerfile or when running via `act`
    # Since we do not install the Rust toolchain in the gnu-base image, it is not needed to rebuild this every time.
    # Also skip during nightly builds
    if: |
      github.repository == 'BlackDex/rust-musl' &&
      github.event.schedule != '30 9 * * *'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      # This action is messing with the host caching when using `act`
      - name: Setup Docker Buildx (setup-buildx-action)
        if: ${{ !env.ACT }}
        uses: docker/setup-buildx-action@v1

      # Use the DOCKER_BUILDKIT=1 env when using `act`
      - name: Setup Docker Buildx (DOCKER_BUILDKIT=1)
        if: ${{ env.ACT }}
        shell: bash
        run: |
          echo "DOCKER_BUILDKIT=1"
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      # Do not login when using `act`
      - name: Login to DockerHub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker Build Cache
        id: docker_cache
        run: |
          #
          # Check if we are running this via act or not and determine the caching method
          if [[ -z "${ACT}" ]]; then
            echo "set-output name=cache_from::type=gha,scope=amd64-gnu-base"
            echo "::set-output name=cache_from::type=gha,scope=amd64-gnu-base"
            echo "set-output name=cache_to::type=gha,scope=amd64-gnu-base"
            echo "::set-output name=cache_to::type=gha,scope=amd64-gnu-base"
          else
            echo "set-output name=cache_from::blackdex/rust-musl:gnu-base"
            echo "::set-output name=cache_from::blackdex/rust-musl:gnu-base"
            echo "set-output name=cache_to::"
            echo "::set-output name=cache_to::"
          fi
          #

      - name: Docker Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.gnu-base
          tags: |
            blackdex/rust-musl:gnu-base
            blackdex/rust-musl:gnu-base-${{ needs.build_vars.outputs.date }}
          push: ${{ !env.ACT }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}


  # ###
  # Building the final MUSL Based images including the rust toolchain.
  musl-base:
    name: Build MUSL Base Image - ${{ matrix.env.IMAGE_TAG }}
    needs: [build_vars, gnu-base]
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'BlackDex/rust-musl' }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - IMAGE_TAG: x86_64-musl
            TARGET: x86_64-unknown-linux-musl
            OPENSSL_ARCH: "linux-x86_64 enable-ec_nistp_64_gcc_128"
            TEST_CRATE: dieselmulticrate
          - IMAGE_TAG: armv7-musleabihf
            TARGET: armv7-unknown-linux-musleabihf
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: dieselmulticrate
          # The aarch64 musl is having issues with rustc, we use a different test crate for now
          # Also, we need to provide some extra RUSTFLAGS for the nightly version to build
          # See: https://github.com/rust-lang/rust/issues/89626
          # A Temp solution can be found here: https://github.com/twilight-rs/http-proxy/pull/42/files#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557
          - IMAGE_TAG: aarch64-musl
            TARGET: aarch64-unknown-linux-musl
            OPENSSL_ARCH: linux-aarch64
            TEST_CRATE: dieselsqlitecrate
            NIGHTLY_RUSTFLAGS: "-Zgcc-ld=lld "
          - IMAGE_TAG: arm-musleabi
            TARGET: arm-unknown-linux-musleabi
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: dieselmulticrate
          - IMAGE_TAG: arm-musleabihf
            TARGET: arm-unknown-linux-musleabihf
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: dieselmulticrate
          - IMAGE_TAG: armv5te-musleabi
            TARGET: armv5te-unknown-linux-musleabi
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: dieselmulticrate

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      # This action is messing with the host caching when using `act`
      - name: Setup Docker Buildx (setup-buildx-action)
        if: ${{ !env.ACT }}
        uses: docker/setup-buildx-action@v1

      # Use the DOCKER_BUILDKIT=1 env when using `act`
      - name: Setup Docker Buildx (DOCKER_BUILDKIT=1)
        if: ${{ env.ACT }}
        shell: bash
        run: |
          echo "DOCKER_BUILDKIT=1"
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      # Do not login when using `act`
      - name: Login to DockerHub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker Build Cache
        id: docker_cache
        run: |
          #
          # Check if we are running this via act or not and determine the caching method
          if [[ -z "${ACT}" ]]; then
            echo "set-output name=cache_from::type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
            echo "::set-output name=cache_from::type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
            echo "set-output name=cache_to::type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
            echo "::set-output name=cache_to::type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
          else
            echo "set-output name=cache_from::blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}"
            echo "::set-output name=cache_from::blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}"
            echo "set-output name=cache_to::"
            echo "::set-output name=cache_to::"
          fi
          #

      # ###
      # Rust Stable

      - name: Docker Build - Rust Stable
        # Skip during nightly builds
        if: ${{ github.event.schedule != '30 9 * * *' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          # Set load to true so that we can test the builded image in the next step
          load: ${{ !env.ACT }}
          # Do not push the image just yet, we first want to test it
          push: false
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            RUST_CHANNEL=stable
          tags: blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-test
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      - name: Test Docker Image - Rust Stable
        # Skip during nightly builds
        if: ${{ github.event.schedule != '30 9 * * *' }}
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="${{ matrix.env.STABLE_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build'

      - name: Docker Push - Rust Stable
        # Skip during nightly builds
        if: ${{ github.event.schedule != '30 9 * * *' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          # Disable load, because we are going to push the image here
          load: false
          # Run this step also when using `act`, but do not push the images when build locally
          push: ${{ !env.ACT }}
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            RUST_CHANNEL=stable
          tags: |
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-${{ needs.build_vars.outputs.date }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.date }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      # ###
      # Rust Nightly

      - name: Docker Build - Rust Nightly
        uses: docker/build-push-action@v2
        with:
          context: .
          # Set load to true so that we can test the builded image in the next step
          load: ${{ !env.ACT }}
          # Do not push the image just yet, we first want to test it
          push: false
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            RUST_CHANNEL=nightly
          tags: blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-test
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      - name: Test Docker Image - Rust Nightly
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="${{ matrix.env.NIGHTLY_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build'

      - name: Docker Push - Rust Nightly
        uses: docker/build-push-action@v2
        with:
          context: .
          # Disable load, because we are going to push the image here
          load: false
          # Run this step also when using `act`, but do not push the images when build locally
          push: ${{ !env.ACT }}
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            RUST_CHANNEL=nightly
          tags: |
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-${{ needs.build_vars.outputs.date }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}
