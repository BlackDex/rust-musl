on:
  push:
    paths:
      - ".github/workflows/rust-musl.yml"
      - "Dockerfile.musl-base"
    branches:
      - main

  workflow_dispatch:
    inputs:
      nightly_date:
        description: "Nightly date to build"
        required: false
        default: ""
      fresh_stable:
        description: "Trigger new stable build"
        required: false
        default: ""

  schedule:
    - cron: '30 9 * * *' # everyday at 09:30 UTC

## ##
## To trigger this workflow using `act` (https://github.com/nektos/act) you can do the following.
## Full run no/different rustc_hash: (This triggers a fresh stable, since the rustc_hash is not available)
##   act push -e <(echo '{"inputs":{"nightly_date":"","fresh_stable":""}}') -j musl-base
##
## Full run with same rustc_hash: (Get the current rustc_hash either from the output of the rust_stable step, or running rustc -vV your self)
##   act push -e <(echo '{"inputs":{"nightly_date":"","fresh_stable":""}}') --env RUSTC_STABLE_HASH_ACT=f1edd0429 -j musl-base
##
## Nightly dispatch:
##   act workflow_dispatch -e <(echo '{"action":"workflow_dispatch", "inputs":{"nightly_date":"","fresh_stable":""}}') -j musl-base
##
## Nightly dispatch specific date:
##   act workflow_dispatch -e <(echo '{"action":"workflow_dispatch", "inputs":{"nightly_date":"2012-12-03","fresh_stable":""}}') -j musl-base
##
## Stable and Nightly dispatch:
##   act workflow_dispatch -e <(echo '{"action":"workflow_dispatch", "inputs":{"nightly_date":"","fresh_stable":"true"}}') -j musl-base
##
## To only see the outputs from the build_vars to see what is getting triggered, use the same commands as above but replace `musl-base` with `build_vars`
## ##

name: Rust MUSL

jobs:
  build_vars:
    name: Generate Build Variables
    runs-on: ubuntu-latest
    outputs:
      current_date: ${{ steps.build_vars.outputs.current_date }}
      nightly_date: ${{ steps.build_vars.outputs.nightly_date }}
      nightly_tag_postfix: ${{ steps.build_vars.outputs.nightly_tag_postfix }}
      nightly_trigger: ${{ steps.build_vars.outputs.nightly_trigger }}
      stable_trigger: ${{ steps.build_vars.outputs.stable_trigger }}
      stable_version: ${{ steps.build_vars.outputs.stable_version }}
      # Special version to match the vaultwarden stable version currently used in master
      vaultwarden_version: ${{ steps.build_vars.outputs.vaultwarden_version }}
      # We also append the value of workflow input fresh_stable here.
      # This will ensure we do trigger a fresh rustup.
      stable_rustc_hash: "${{ steps.rust_stable.outputs.rustc_hash }}${{ github.event.inputs.fresh_stable }}"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Get Rust stable info
        id: rust_stable
        uses: ThexXTURBOXx/toolchain@b2f1773d4d7e4cb56284443a582828a3b9205027 # revert back to actions-rs/toolchain@v1 once it's been updated to node16
        with:
            toolchain: stable
            override: true
            default: true
            profile: minimal

      - name: Cache previous rustc stable hash
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: ~/rustc-stable.hash
          key: build-vars-rustc-stable-${{ steps.rust_stable.outputs.rustc_hash }}
          restore-keys: |
            build-vars-rustc-stable-

      # Check if this is a scheduled job, if so, set to nightly
      - name: Get build variables
        id: build_vars
        run: |
          #
          # Special function to either use set-output or echo >> GITHUB_OUTPUT
          function github_output () {
            echo "${1}=${2}" | tee -a "${GITHUB_OUTPUT}"
          }

          #
          # Date
          export DATE=$(date +'%Y-%m-%d')
          github_output "current_date" "${DATE}"

          #
          # Since `act` doesn't support actions/cache (yet) we check some env vars here.
          # With this we can fake the cache if we want to so we can test the flow.
          if [[ -n "${{ env.RUSTC_STABLE_HASH_ACT }}" ]]; then
            echo "Found RUSTC_STABLE_HASH_ACT"
            echo "${{ env.RUSTC_STABLE_HASH_ACT }}" | tee ~/rustc-stable.hash
          fi

          #
          # Determine if we need to update the stable version
          export RUSTC_STABLE_HASH_CACHED="$( cat ~/rustc-stable.hash 2>/dev/null )"
          if [[ -n "${{ github.event.inputs.fresh_stable }}" ]]; then
            github_output "stable_trigger" "true"
          elif [[ "${RUSTC_STABLE_HASH_CACHED}" != ${{ steps.rust_stable.outputs.rustc_hash }} ]]; then
            echo "Cached: '${RUSTC_STABLE_HASH_CACHED}' - Current: '${{ steps.rust_stable.outputs.rustc_hash }}'"
            github_output "stable_trigger" "true"
          else
            github_output "stable_trigger" ""
          fi
          # Store the current stable hash in GHA Cache
          echo "${{ steps.rust_stable.outputs.rustc_hash }}" | tee ~/rustc-stable.hash

          #
          # Extract rust stable version
          export RUST_VER="$( echo "${{ steps.rust_stable.outputs.rustc }}" | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]" )"
          github_output "stable_version" "${RUST_VER}"

          # Get the Vaultwarden stable version from the `rust-toolchain` file.
          export VW_RUST_VER="$(curl -sSL https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/rust-toolchain)"
          # Check if the version matches X.YY.Z, if not use the RUST_VER variable
          if [[ "${VW_RUST_VER}" =~ ^[0-9]{1}\.[0-9]{2}\.[0-9]{1}$ ]]; then
            github_output "vaultwarden_version" "${VW_RUST_VER}"
          else
            github_output "vaultwarden_version" "${RUST_VER}"
          fi

          #
          # Determine nightly date
          # If this is triggered by a workflow dispatch and a date is filled use that, else use the current date
          if [[ -z "${{ github.event.inputs.nightly_date }}" ]]; then
            github_output "nightly_date" "${DATE}"

            # Set an empty nightly_tag_postfix because we are building the current nightly
            github_output "nightly_tag_postfix" ""

          # When there is a custom nightly_date set, lets first validate it.
          elif [[ "${{ github.event.inputs.nightly_date }}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] \
            && date +'%Y-%m-%d' -d'${{ github.event.inputs.nightly_date }}' >/dev/null 2>&1 \
            && [[ $(date +%s -d "00:00:00") -ge $(date +%s -d'${{ github.event.inputs.nightly_date }}') ]] ; then
              github_output "nightly_date" "${{ github.event.inputs.nightly_date }}"

              # To prevent tagging an older nightly version, we set a postfix here which is used by the nightly build/push action
              github_output "nightly_tag_postfix" "-${{ github.event.inputs.nightly_date }}"

          # If there was a workflow run, and it had an invalid date, stop the whole workflow
          else
            echo "error::Invalid nightly_date"
            echo "::error::Invalid nightly_date"
            exit 1
          fi

          #
          # Check if we want to build a nightly only.
          # We want this either when the cron is triggered
          # Or if we trigger a manual workflow
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]] || [[ "${{ github.event.schedule }}" == '30 9 * * *' ]]; then
            github_output "nightly_trigger" "true"
          else
            github_output "nightly_trigger" ""
          fi

  # ###
  # Building the final MUSL Based images including the rust toolchain.
  musl-base:
    name: Build MUSL Base Image - ${{ matrix.env.IMAGE_TAG }}
    needs: [build_vars]
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'BlackDex/rust-musl' }}
    strategy:
      # max-parallel: 1 # Use this when using `act` and buildx, else there are some strange buildx issues.
      fail-fast: false
      matrix:
        env:
          - IMAGE_TAG: x86_64-musl
            TARGET: x86_64-unknown-linux-musl
            OPENSSL_ARCH: "linux-x86_64 enable-ec_nistp_64_gcc_128"
            TEST_CRATE: multicrate
          - IMAGE_TAG: armv7-musleabihf
            TARGET: armv7-unknown-linux-musleabihf
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: multicrate
          # The aarch64 musl does not support outline-atomics and needs to be disabled
          # We need to provide some extra CPPFLAGS to prevent errors during the compilation of the Rust project
          - IMAGE_TAG: aarch64-musl
            TARGET: aarch64-unknown-linux-musl
            OPENSSL_ARCH: linux-aarch64
            ARCH_CPPFLAGS: "-mno-outline-atomics"
            TEST_CRATE: multicrate
          - IMAGE_TAG: arm-musleabi
            TARGET: arm-unknown-linux-musleabi
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: multicrate
            XTRA_RUSTFLAGS: "-Clink-arg=/usr/local/musl/arm-unknown-linux-musleabi/lib/libatomic.a "
          - IMAGE_TAG: arm-musleabihf
            TARGET: arm-unknown-linux-musleabihf
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: multicrate
            XTRA_RUSTFLAGS: "-Clink-arg=/usr/local/musl/arm-unknown-linux-musleabihf/lib/libatomic.a "
          - IMAGE_TAG: armv5te-musleabi
            TARGET: armv5te-unknown-linux-musleabi
            OPENSSL_ARCH: linux-armv4
            TEST_CRATE: multicrate
            XTRA_RUSTFLAGS: "-Clink-arg=/usr/local/musl/armv5te-unknown-linux-musleabi/lib/libatomic.a "

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # This action is messing with the host caching when using `act`
      - name: Setup Docker Buildx (setup-buildx-action)
        if: ${{ !env.ACT }}
        uses: docker/setup-buildx-action@v2

      # Use the DOCKER_BUILDKIT=1 env when using `act`
      - name: Setup Docker Buildx (DOCKER_BUILDKIT=1)
        if: ${{ env.ACT }}
        shell: bash
        run: |
          echo "DOCKER_BUILDKIT=1"
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      # Do not login when using `act`
      - name: Login to DockerHub
        if: ${{ !env.ACT }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker Build Cache
        id: docker_cache
        run: |
          #
          # Special function to 'echo >> GITHUB_OUTPUT' but easier
          function github_output () {
            echo "${1}=${2}" | tee -a "${GITHUB_OUTPUT}"
          }

          #
          # Check if we are running this via act or not and determine the caching method
          if [[ -n "${ACT}" ]]; then
            github_output "cache_from" "blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}"
            github_output "cache_to" ""
          else
            github_output "cache_from" "type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
            github_output "cache_to" "type=gha,scope=${{ matrix.env.IMAGE_TAG }}-musl"
          fi
          #

      # ###
      # Rust Current Stable

      - name: Docker Build - Rust Current Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger }}
        uses: docker/build-push-action@v3
        with:
          context: .
          # Set load to true so that we can test the builded image in the next step
          load: ${{ !env.ACT }}
          # Do not push the image just yet, we first want to test it
          push: false
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=stable
            RUSTC_HASH=${{ needs.build_vars.outputs.stable_rustc_hash }}
          tags: blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-test
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      - name: Test Docker Image - Rust Current Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger }}
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Test Docker Image (PQ14) - Rust Current Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger }}
        continue-on-error: true
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e PQ_LIB_DIR="/usr/local/musl/pq14/lib" \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Docker Push - Rust Current Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger }}
        uses: docker/build-push-action@v3
        with:
          context: .
          # Disable load, because we are going to push the image here
          load: false
          # Run this step also when using `act`, but do not push the images when build locally
          push: ${{ !env.ACT }}
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=stable
            RUSTC_HASH=${{ needs.build_vars.outputs.stable_rustc_hash }}
          tags: |
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-${{ needs.build_vars.outputs.current_date }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-${{ needs.build_vars.outputs.stable_version }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-${{ needs.build_vars.outputs.stable_version }}-${{ needs.build_vars.outputs.current_date }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.current_date }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.stable_version }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.stable_version }}-${{ needs.build_vars.outputs.current_date }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}


      # ###
      # Rust Vaultwarden Stable

      - name: Docker Build - Rust Vaultwarden Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_version != needs.build_vars.outputs.vaultwarden_version && (needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger) }}
        uses: docker/build-push-action@v3
        with:
          context: .
          # Set load to true so that we can test the builded image in the next step
          load: ${{ !env.ACT }}
          # Do not push the image just yet, we first want to test it
          push: false
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=${{ needs.build_vars.outputs.vaultwarden_version }}
          tags: blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-vw-test
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      - name: Test Docker Image - Rust Vaultwarden Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_version != needs.build_vars.outputs.vaultwarden_version && (needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger) }}
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-vw-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Test Docker Image (PQ14) - Rust Vaultwarden Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_version != needs.build_vars.outputs.vaultwarden_version && (needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger) }}
        continue-on-error: true
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e PQ_LIB_DIR="/usr/local/musl/pq14/lib" \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-vw-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Docker Push - Rust Vaultwarden Stable
        # Skip during nightly builds
        if: ${{ needs.build_vars.outputs.stable_version != needs.build_vars.outputs.vaultwarden_version && (needs.build_vars.outputs.stable_trigger || !needs.build_vars.outputs.nightly_trigger) }}
        uses: docker/build-push-action@v3
        with:
          context: .
          # Disable load, because we are going to push the image here
          load: false
          # Run this step also when using `act`, but do not push the images when build locally
          push: ${{ !env.ACT }}
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=${{ needs.build_vars.outputs.vaultwarden_version }}
          tags: |
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.vaultwarden_version }}-${{ needs.build_vars.outputs.current_date }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-stable-${{ needs.build_vars.outputs.vaultwarden_version }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}


      # ###
      # Rust Nightly

      - name: Docker Build - Rust Nightly
        uses: docker/build-push-action@v3
        with:
          context: .
          # Set load to true so that we can test the builded image in the next step
          load: ${{ !env.ACT }}
          # Do not push the image just yet, we first want to test it
          push: false
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=nightly-${{ needs.build_vars.outputs.nightly_date }}
          tags: blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-test
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}

      - name: Test Docker Image - Rust Nightly
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Test Docker Image (PQ14) - Rust Nightly
        continue-on-error: true
        run: |
          # Clean leftover files from previous run if they exists
          rm -vf "$(pwd)/test/${{ matrix.env.TEST_CRATE }}/Cargo.lock"
          # Run the test
          docker run --rm \
            -v "$(pwd)/test/${{ matrix.env.TEST_CRATE }}":/home/rust/src \
            -e RUST_BACKTRACE=1 \
            -e PQ_LIB_DIR="/usr/local/musl/pq14/lib" \
            -e RUSTFLAGS="${{ matrix.env.XTRA_RUSTFLAGS }}-Clink-arg=-s" \
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-test bash -c 'cargo -Vv ; rustc -Vv ; cargo update ; cargo build --release'

      - name: Docker Push - Rust Nightly
        uses: docker/build-push-action@v3
        with:
          context: .
          # Disable load, because we are going to push the image here
          load: false
          # Run this step also when using `act`, but do not push the images when build locally
          push: ${{ !env.ACT }}
          file: ./Dockerfile.musl-base
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            IMAGE_TAG=${{ matrix.env.IMAGE_TAG }}
            OPENSSL_ARCH=${{ matrix.env.OPENSSL_ARCH }}
            ARCH_CPPFLAGS=${{ matrix.env.ARCH_CPPFLAGS }}
            RUST_CHANNEL=nightly-${{ needs.build_vars.outputs.nightly_date }}
          tags: |
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly${{ needs.build_vars.outputs.nightly_tag_postfix }}
            blackdex/rust-musl:${{ matrix.env.IMAGE_TAG }}-nightly-${{ needs.build_vars.outputs.nightly_date }}
          cache-from: ${{ steps.docker_cache.outputs.cache_from }}
          cache-to: ${{ steps.docker_cache.outputs.cache_to }}
