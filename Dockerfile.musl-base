# syntax=docker/dockerfile:1

# Which Toolchain Tag to use
ARG IMAGE_TAG=x86_64-musl
# Which registry to use for the musl-toolchain
ARG TOOLCHAIN_REGISTRY=ghcr.io

# Extract the pre-build toolchain from the musl-toolchain image
# This doesn't need to be build everytime since not much will change
FROM ${TOOLCHAIN_REGISTRY}/blackdex/musl-toolchain:${IMAGE_TAG} AS musl-toolchain

# Start building the musl-base
# https://hub.docker.com/_/ubuntu
FROM docker.io/library/ubuntu:24.04 AS base
ARG QEMU_CPU=
SHELL ["/bin/bash", "-eux", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    TERM=xterm-256color \
    TZ=UTC

RUN <<EOF
    apt-get update
    apt-get install -y \
        autoconf \
        automake \
        make \
        cmake \
        pkg-config \
        curl \
        patch \
        file \
        bzip2 \
        xz-utils \
        unzip \
        git \
        tzdata \
        ca-certificates \
        bison \
        flex \
        gcc-14 \
        libc6-dev \
        libclang1-19 \
        jimsh \
        inotify-tools \
        --no-install-recommends \

    # Install only libtool
    cd /var/cache/
    apt-get download libtool
    dpkg-deb -x libtool_*.deb /

    # Set GCC14 As default
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 90 \
      --slave /usr/bin/cc cc /usr/bin/gcc-14 \
      --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-14 \
      --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-14 \
      --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-14

    # Cleanup apt
    apt-get clean -y
    rm -rf /var/cache/* /var/lib/apt/lists/*

    # Default cleanups
    find /var/log -type f -delete
EOF

# Define the target and openssl architecture to use during build
ARG TARGET=x86_64-unknown-linux-musl
ARG OPENSSL_ARCH=linux-x86_64
ARG ARCH_CPPFLAGS=

ENV TARGET="${TARGET}" \
    TARGET_PREFIX=/usr/local/musl \
    RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    SYSROOT="/usr/local/musl/${TARGET}" \
    CURL_CMD="curl --retry 5 --retry-all-errors -sSL"

ENV PATH="${TARGET_PREFIX}/bin:${CARGO_HOME}/bin:${PATH}" \
    TARGET_PKG_CONFIG_PATH="${TARGET_PREFIX}/lib/pkgconfig" \
    TARGET_LD="${TARGET}-ld" \
    TARGET_AR="${TARGET}-ar" \
    TARGET_CC="${TARGET}-gcc" \
    TARGET_CXX="${TARGET}-g++" \
    TARGET_RANLIB="${TARGET}-ranlib" \
    TARGET_LDFLAGS="-flto=auto -s -pie -static-libstdc++ -Wl,-gc-sections -L${TARGET_PREFIX}/lib -L${SYSROOT}/lib" \
    SHARED_CPPFLAGS="-I${TARGET_PREFIX}/include -I${SYSROOT}/include ${ARCH_CPPFLAGS}" \
    SHARED_CFLAGS="--sysroot=${SYSROOT} -g0 -Os -fstack-clash-protection -fstack-protector-strong -fPIE -pie -fpie --static -ffunction-sections -fdata-sections -s -Wl,-gc-sections -Wl,-pie -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -Wl,--sort-common -Wa,--noexecstack" \
    RUST_MUSL_CROSS_TARGET="${TARGET}" \
    # pkg-config
    PKG_CONFIG_PATH="${TARGET_PREFIX}/lib/pkgconfig" \
    PKG_CONFIG_LIBDIR="${TARGET_PREFIX}/lib:${SYSROOT}/lib" \
    PKG_CONFIG_SYSTEM_LIBRARY_PATH="${TARGET_PREFIX}/lib:${SYSROOT}/lib" \
    PKG_CONFIG_SYSTEM_INCLUDE_PATH="${TARGET_PREFIX}/include:${SYSROOT}/include"

WORKDIR /tmp

COPY --link --from=musl-toolchain "/usr/local/musl" "${TARGET_PREFIX}"

RUN mkdir -p "${TARGET_PREFIX}/tbin" /home/rust/src && \
    # Create a symlink to the SYSROOT, this could help with some builds
    ln -sfrn "${SYSROOT}" "/${TARGET}"

# Build zlib (used in openssl, curl, pq, sqlite and mariadb)
ARG ZLIB_VER="1.3.1"
RUN <<EOF
    echo "zlib"

    ${CURL_CMD} "https://zlib.net/zlib-${ZLIB_VER}.tar.xz" | tar xJ
    cd "zlib-${ZLIB_VER}"

    export PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}"
    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

    ./configure \
      --static \
      --prefix="${TARGET_PREFIX}"
    make -j"$(nproc)" && make install
    cd /tmp && rm -rf "zlib-${ZLIB_VER}"

    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"
EOF

# Build OpenSSL (used in curl, pq and mariadb)
ARG SSL_VER="3.5.1"
RUN <<EOF
    echo "OpenSSL"

    ${CURL_CMD} "https://github.com/openssl/openssl/releases/download/openssl-${SSL_VER}/openssl-${SSL_VER}.tar.gz" | tar xz
    cd "openssl-${SSL_VER}"

    # We can't enable `-flto=auto -ffat-lto-objects` for CFLAGS this generates an error which causes other libraries to also fail subsequently.
    # See: https://github.com/openssl/openssl/issues/18663
    #
    # The OpenSSL Architecture is defined by setting the correct `OPENSSL_ARCH` ARG
    export PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}"
    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS}"
    export CC="${TARGET_CC}"

    # Disable several features, either insecure or not working that well on musl libc or not needed at all
    ./Configure \
      `# No shared objects, we just want static libraries` \
      no-shared \
      no-module \
      `# Not running tests` \
      no-tests \
      no-unit-test \
      `# Disable compression` \
      no-comp \
      no-zlib \
      no-zlib-dynamic \
      `# rust-openssl defined flags` \
      no-dso \
      no-ssl3 \
      no-legacy \
      no-md2 \
      no-rc5 \
      no-weak-ssl-ciphers \
      no-camellia \
      no-idea \
      no-seed \
      no-engine \
      no-async \
      `# Alpine defined flags` \
      enable-ktls \
      no-mdc2 \
      no-ec2m \
      `# Set which OpenSSL Architecture needs to be used` \
      ${OPENSSL_ARCH} \
      --openssldir="${TARGET_PREFIX}/ssl" \
      --libdir="${TARGET_PREFIX}/lib" \
      --prefix="${TARGET_PREFIX}"

    make -j"$(nproc)" depend
    make -j"$(nproc)" build_libs
    make -j"$(nproc)" build_programs
    make install_dev install_runtime

    cd /tmp && rm -rf "openssl-${SSL_VER}"
    # Move the compiled binaries out off the main musl bin to tbin
    mv -t "${TARGET_PREFIX}/tbin" "${TARGET_PREFIX}/bin/openssl" "${TARGET_PREFIX}/bin/c_rehash"

    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"
EOF

# Build curl (needs with-zlib and all this stuff to allow https)
ARG CURL_VER="8.14.1"
RUN <<EOF
    echo "libcurl"

    ${CURL_CMD} "https://curl.se/download/curl-${CURL_VER}.tar.xz" | tar xJ
    cd "curl-${CURL_VER}"

    # Rename libatomic.la to libatomic.la_disabled
    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]] ; then
      mv -vf "${SYSROOT}/lib/libatomic.la" "${SYSROOT}/lib/libatomic.la_disabled"
      export LIBS="-latomic"
    fi

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

    ./configure \
      --with-sysroot="${SYSROOT}" \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --disable-shared \
      --enable-static \
      --enable-ipv6 \
      --with-zlib \
      --with-openssl \
      --disable-ldap \
      --disable-manual \
      --disable-docs \
      --without-libpsl \
      --without-libgsasl \
      --without-libidn2 \
      --without-libssh2 \
      --enable-optimize \
      --with-ca-path=/etc/ssl/certs/ \
      --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
      --with-ca-fallback \
      --bindir="${TARGET_PREFIX}/tbin" \
      --sbindir="${TARGET_PREFIX}/tbin" \
      --prefix="${TARGET_PREFIX}"
    make -j"$(nproc)" && make install

    cd /tmp && rm -rf "curl-${CURL_VER}"

    # Rename libatomic.la_disabled back to libatomic.la
    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]] ; then
      mv -vf "${SYSROOT}/lib/libatomic.la_disabled" "${SYSROOT}/lib/libatomic.la"
    fi

    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"
EOF

# Install prebuilt sccache for the correct host platform
ARG SCCACHE_VER="0.10.0"
RUN <<EOF
    HOST_ARCH="$(uname -m)"
    ASSET_NAME="sccache-v${SCCACHE_VER}-${HOST_ARCH}-unknown-linux-musl"
    ${CURL_CMD} "https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VER}/${ASSET_NAME}.tar.gz" \
      | tar -xz -C /usr/local/bin --strip-components=1 --no-same-owner "${ASSET_NAME}/sccache"
EOF

# Build libpq v15
FROM base AS build-pq15
ARG PQ_15_VER="15.13"
WORKDIR /tmp/pq15
RUN <<EOF
    echo "PostgreSQL v15"

    ${CURL_CMD} "https://ftp.postgresql.org/pub/source/v${PQ_15_VER}/postgresql-${PQ_15_VER}.tar.bz2" | tar -xj --strip-components=1

    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]]; then
      export LIBS="-latomic"
    fi

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

   ./configure \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --without-readline \
      --with-ssl=openssl \
      --disable-rpath \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${TARGET_PREFIX}/pq15"

    # build common, port and libpq only
    cd src/common
      # Do not use -j"$(nproc)" for `make all` here, that breaks compilation because of bison/flex
      make all
      make -j"$(nproc)" install
    cd ../../src/port
      make -j"$(nproc)" all
      make -j"$(nproc)" install
    cd ../../src/interfaces/libpq
      make -j"$(nproc)" all-static-lib
      make -j"$(nproc)" install-lib-static

    # Merge these libraries so pq-sys will work without using pkg-config
    cd "${TARGET_PREFIX}/pq15/lib"
      mkdir -v merge && cd merge
      # Extract the generated .a files
      # Use the _shlib files since those contain the correct object files to link with libpq.a
      # https://web.archive.org/save/https://www.postgresql.org/message-id/2656597.1728582542%40sss.pgh.pa.us
      "${TARGET_AR}" x ../libpq.a
      "${TARGET_AR}" x ../libpgcommon_shlib.a
      "${TARGET_AR}" x ../libpgport_shlib.a
      # Merge all these files again into one libpq.a file
      # This is needed because the pq-sys crate only checks this file: https://github.com/sgrif/pq-sys/issues/27
      "${TARGET_AR}" crsv libpq.a ./*.o

      # Move and cleanup
      mv -vf libpq.a ../libpq.a
      cd ../
      "${TARGET_AR}" sv libpq.a
      rm -rf merge libpgcommon* libpgport*

    # Default cleanups
    rm -rf "${TARGET_PREFIX}/pq15/share/man"
EOF

# Build libpq v16
FROM base AS build-pq16
ARG PQ_16_VER="16.9"
WORKDIR /tmp/pq16
RUN <<EOF
    echo "PostgreSQL v16"

    ${CURL_CMD} "https://ftp.postgresql.org/pub/source/v${PQ_16_VER}/postgresql-${PQ_16_VER}.tar.bz2" | tar -xj --strip-components=1

    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]]; then
      export LIBS="-latomic"
    fi

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

   ./configure \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --without-readline \
      --with-ssl=openssl \
      --disable-rpath \
      --without-icu \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${TARGET_PREFIX}/pq16"

    # build common, port and libpq only
    cd src/common
      # Do not use -j"$(nproc)" for `make all` here, that breaks compilation because of bison/flex
      make all
      make -j"$(nproc)" install
    cd ../../src/port
      make -j"$(nproc)" all
      make -j"$(nproc)" install
    cd ../../src/interfaces/libpq
      make -j"$(nproc)" all-static-lib
      make -j"$(nproc)" install-lib-static

    # Merge these libraries so pq-sys will work without using pkg-config
    cd "${TARGET_PREFIX}/pq16/lib"
      mkdir -v merge && cd merge
      # Extract the generated .a files
      # Use the _shlib files since those contain the correct object files to link with libpq.a
      # https://web.archive.org/save/https://www.postgresql.org/message-id/2656597.1728582542%40sss.pgh.pa.us
      "${TARGET_AR}" x ../libpq.a
      "${TARGET_AR}" x ../libpgcommon_shlib.a
      "${TARGET_AR}" x ../libpgport_shlib.a
      # Merge all these files again into one libpq.a file
      # This is needed because the pq-sys crate only checks this file: https://github.com/sgrif/pq-sys/issues/27
      "${TARGET_AR}" crsv libpq.a ./*.o

      # Move and cleanup
      mv -vf libpq.a ../libpq.a
      cd ../
      "${TARGET_AR}" sv libpq.a
      rm -rf merge libpgcommon* libpgport*

    # Default cleanups
    rm -rf "${TARGET_PREFIX}/pq16/share/man"
EOF

# Build libpq v17
FROM base AS build-pq17
ARG PQ_17_VER="17.5"
WORKDIR /tmp/pq17
RUN <<EOF
    echo "PostgreSQL v17"

    ${CURL_CMD} "https://ftp.postgresql.org/pub/source/v${PQ_17_VER}/postgresql-${PQ_17_VER}.tar.bz2" | tar -xj --strip-components=1

    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]]; then
      export LIBS="-latomic"
    fi

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

   ./configure \
      --host="${TARGET}" \
      --without-readline \
      --with-ssl=openssl \
      --disable-rpath \
      --without-icu \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${TARGET_PREFIX}/pq17"

    # build common, port and libpq only
    cd src/common
      # Do not use -j"$(nproc)" for `make all` here, that breaks compilation because of bison/flex
      make all
      make -j"$(nproc)" install
    cd ../../src/port
      make -j"$(nproc)" all
      make -j"$(nproc)" install
    cd ../../src/interfaces/libpq
      make -j"$(nproc)" all-static-lib
      make -j"$(nproc)" install-lib-static

    # Merge these libraries so pq-sys will work without using pkg-config
    cd "${TARGET_PREFIX}/pq17/lib"
      mkdir -v merge && cd merge
      # Extract the generated .a files
      # Use the _shlib files since those contain the correct object files to link with libpq.a
      # https://web.archive.org/save/https://www.postgresql.org/message-id/2656597.1728582542%40sss.pgh.pa.us
      "${TARGET_AR}" x ../libpq.a
      "${TARGET_AR}" x ../libpgcommon_shlib.a
      "${TARGET_AR}" x ../libpgport_shlib.a
      # Merge all these files again into one libpq.a file
      # This is needed because the pq-sys crate only checks this file: https://github.com/sgrif/pq-sys/issues/27
      "${TARGET_AR}" crsv libpq.a ./*.o

      # Move and cleanup
      mv -vf libpq.a ../libpq.a
      cd ../
      "${TARGET_AR}" sv libpq.a
      rm -rf merge libpgcommon* libpgport*

    # Default cleanups
    rm -rf "${TARGET_PREFIX}/pq17/share/man"
EOF

# Build libsqlite3
FROM base AS build-sqlite
ARG SQLITE_VER="3.50.2"
WORKDIR /tmp/sqlite
RUN <<EOF
    echo "SQLite3"

    SQL_ID="$(echo -n "${SQLITE_VER}" | xargs -d '.' printf '%d%02d%02d00')"
    ${CURL_CMD} "https://www.sqlite.org/2025/sqlite-autoconf-${SQL_ID}.tar.gz" | tar xz --strip-components=1

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CC="${TARGET_CC}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"

    # libsqlite3-sys crate default flags
    CFLAGS+=" -DSQLITE_CORE"
    CFLAGS+=" -DSQLITE_DEFAULT_FOREIGN_KEYS=1"
    CFLAGS+=" -DSQLITE_ENABLE_API_ARMOR"
    CFLAGS+=" -DSQLITE_ENABLE_COLUMN_METADATA"
    CFLAGS+=" -DSQLITE_ENABLE_DBSTAT_VTAB"
    CFLAGS+=" -DSQLITE_ENABLE_FTS3"
    CFLAGS+=" -DSQLITE_ENABLE_FTS3_PARENTHESIS"
    CFLAGS+=" -DSQLITE_ENABLE_FTS5"
    CFLAGS+=" -DSQLITE_ENABLE_JSON1"
    CFLAGS+=" -DSQLITE_ENABLE_MEMORY_MANAGEMENT"
    CFLAGS+=" -DSQLITE_ENABLE_RTREE"
    CFLAGS+=" -DSQLITE_ENABLE_STAT4"
    CFLAGS+=" -DSQLITE_SOUNDEX"
    CFLAGS+=" -DSQLITE_THREADSAFE=1"
    CFLAGS+=" -DSQLITE_USE_URI"
    CFLAGS+=" -DHAVE_USLEEP=1"
    CFLAGS+=" -D_POSIX_THREAD_SAFE_FUNCTIONS"
    CFLAGS+=" -DHAVE_ISNAN"
    CFLAGS+=" -DHAVE_LOCALTIME_R"
    CFLAGS+=" -DSQLITE_ENABLE_UNLOCK_NOTIFY"
    CFLAGS+=" -DSQLITE_ENABLE_PREUPDATE_HOOK"
    CFLAGS+=" -DSQLITE_ENABLE_SESSION"
    # Alpine pkg default flags
    CFLAGS+=" -DSQLITE_SECURE_DELETE"
    CFLAGS+=" -DSQLITE_ENABLE_FTS4"
    CFLAGS+=" -DSQLITE_MAX_VARIABLE_NUMBER=250000"
    CFLAGS+=" -DSQLITE_MAX_EXPR_DEPTH=10000"
    CFLAGS+=" -DSQLITE_ENABLE_GEOPOLY"
    export CFLAGS

    ./configure \
      --host="${TARGET}" \
      --disable-shared \
      --enable-static \
      --disable-readline \
      --enable-fts3 \
      --enable-fts4 \
      --enable-fts5 \
      --enable-rtree \
      --enable-geopoly \
      --enable-session \
      --bindir="${TARGET_PREFIX}/tbin" \
      --sbindir="${TARGET_PREFIX}/tbin" \
      --prefix="${TARGET_PREFIX}"

    make -j"$(nproc)" libsqlite3.a

    inotifywait -m -r -q -e create,modify,moved_to --exclude ".*(/man|/share/man|/share/doc|/share/gtk-doc).*" --format '%w%f' "$TARGET_PREFIX" > "/tmp/sqlite.log" & INOTIFY_PID=$!
    sleep 0.7

    make -j1 install

    sleep 0.7
    kill $INOTIFY_PID && wait $INOTIFY_PID || true

    echo "== Found SQLite files:"
    sort -u /tmp/sqlite.log

    mkdir -pv "/out"
    if [ -f "/tmp/sqlite.log" ]; then
        sort -u "/tmp/sqlite.log" | while IFS= read -r file_path; do
            # Ensure the path is not empty and exists
            if [ -n "$file_path" ] && [ -e "$file_path" ]; then
                cp --parents -dpR "$file_path" /out/
            fi
        done
    fi
    echo "== Copied SQLite files:"
    find /out/
EOF

# Building MariaDB
FROM base AS build-mariadb
ARG MARIADB_VER="3.3.15"
WORKDIR /tmp/mariadb
RUN <<EOF
    echo "MariaDB Connector/C"

    ${CURL_CMD} "https://github.com/mariadb-corporation/mariadb-connector-c/archive/refs/tags/v${MARIADB_VER}.tar.gz" | tar xz --strip-components=1

    # Download patches for mariadb from Alpine to fix building issues
    # https://gitlab.alpinelinux.org/alpine/aports/-/blob/850d6d51711ebfe6981e53d259bfbb8edfb51318/main/mariadb-connector-c/unused-parameter.patch
    ${CURL_CMD} -o unused-parameter.patch https://gitlab.alpinelinux.org/alpine/aports/-/raw/850d6d51711ebfe6981e53d259bfbb8edfb51318/main/mariadb-connector-c/unused-parameter.patch
    # Apply these patches
    git apply --verbose unused-parameter.patch

    # Prevent shared library from being build, building the shared library will cause linking errors, and we do not use it at all.
    sed -i 's#ADD_LIBRARY(libmariadb SHARED ${libmariadb_RC} ${MARIADB_OBJECTS} ${EMPTY_FILE})#ADD_LIBRARY(libmariadb STATIC ${libmariadb_RC} ${MARIADB_OBJECTS} ${EMPTY_FILE})#' libmariadb/CMakeLists.txt
    export _GCC_SPECS=
    if [[ "${TARGET}" == "arm-unknown-linux-musleabi" ]]; then
      echo -e "%rename libgcc old_libgcc\n*libgcc:\n-latomic %(old_libgcc)" > /tmp/gcc-atomic-patch.specs
      export _GCC_SPECS="-specs=/tmp/gcc-atomic-patch.specs"
    fi

    # Build the patched version
    mkdir build && cd build

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${_GCC_SPECS} ${SHARED_CFLAGS} -flto=auto -ffat-lto-objects"
    export CC="${TARGET_CC}"

    cmake \
      -LAH \
      -DWITH_DOCS=OFF \
      -DCMAKE_SYSROOT="${SYSROOT}" \
      -DCMAKE_IGNORE_PATH="/usr/include" \
      -DCMAKE_INSTALL_PREFIX="${TARGET_PREFIX}" \
      -DINSTALL_BINDIR="tbin" \
      -DBUILD_SHARED_LIBS=OFF \
      -DCMAKE_SYSTEM_NAME=Linux \
      -DCMAKE_HOST_SYSTEM_NAME=Linux \
      -DINSTALL_LIBDIR=lib \
      -DINSTALL_INCLUDEDIR=include/mysql \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DWITH_EXTERNAL_ZLIB=ON \
      -DWITH_SSL=OPENSSL \
      -DWITH_MYSQLCOMPAT=ON \
      -DWITH_UNIT_TESTS=OFF \
      -DCLIENT_PLUGIN_DIALOG=STATIC \
      -DCLIENT_PLUGIN_MYSQL_CLEAR_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CACHING_SHA2_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_SHA256_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CLIENT_ED25519=STATIC \
      -DCLIENT_PLUGIN_PARSEC=STATIC \
      -DCLIENT_PLUGIN_MYSQL_OLD_PASSWORD=OFF \
      -DCLIENT_PLUGIN_REMOTE_IO=OFF \
      -DDEFAULT_CHARSET=utf8mb4 \
      -DDEFAULT_SSL_VERIFY_SERVER_CERT=OFF \
      ../

    make -j"$(nproc)"

    inotifywait -m -r -q -e create,modify,moved_to --exclude ".*(/man|/share/man|/share/doc|/share/gtk-doc).*" --format '%w%f' "$TARGET_PREFIX" > "/tmp/mariadb.log" & INOTIFY_PID=$!
    sleep 0.7

    make -j1 install

    # Create some compatibilty symlinks so pkg-config and diesel can find all the correct files
    ln -sfnr "${TARGET_PREFIX}/include/mysql/mariadb_version.h" "${TARGET_PREFIX}/include/mysql/mysql_version.h"

    # Create and fix the default pkg-config for mysqlclient using the libmariadb generated file
    # We need the library to point to mysqlclient instead of mariadb, else mysqlclient-sys crate will not link it statically!
    sed "s#Name: libmariadb#Name: mysqlclient#g" "${TARGET_PREFIX}/lib/pkgconfig/libmariadb.pc" | \
      sed "s#${TARGET_PREFIX}/lib/lib##g" | \
      sed 's#\.a##g' | \
      sed 's#-ldl\s##g' | \
      sed 's#-lmariadb#-lmysqlclient#g' > "${TARGET_PREFIX}/lib/pkgconfig/mysqlclient.pc"

    sleep 0.7
    kill $INOTIFY_PID && wait $INOTIFY_PID || true

    echo "== Found MariaDB files"
    sort -u /tmp/mariadb.log

    mkdir -pv "/out"
    if [ -f "/tmp/mariadb.log" ]; then
        sort -u "/tmp/mariadb.log" | while IFS= read -r file_path; do
            # Ensure the path is not empty and exists
            if [ -n "$file_path" ] && [ -e "$file_path" ]; then
                cp -v --parents -dpR "$file_path" /out/
            fi
        done
    fi
    echo "== Copied MariaDB files:"
    find /out/
EOF

FROM base AS build-libxml2
ARG LIBXML2_VER="2.14.4"
WORKDIR /tmp/libxml2
# Build libxml2
RUN <<EOF
    echo "libxml2"

    ${CURL_CMD} "https://github.com/GNOME/libxml2/archive/refs/tags/v${LIBXML2_VER}.tar.gz" | tar xz --strip-components=1

    export AR="${TARGET_AR}"
    export LD="${TARGET_LD}"
    export RANLIB="${TARGET_RANLIB}"
    export LDFLAGS="${TARGET_LDFLAGS}"
    export CPPFLAGS="${SHARED_CPPFLAGS}"
    export CFLAGS="${SHARED_CFLAGS} -flto=auto -ffat-lto-objects -fno-semantic-interposition"
    export CC="${TARGET_CC}"
    export NOCONFIGURE="true"

    # autogen
    ./autogen.sh

    # configure
    ./configure \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --enable-static \
      --disable-shared \
      --without-python \
      --without-debug \
      --with-sysroot="${SYSROOT}" \
      --bindir="${TARGET_PREFIX}/tbin" \
      --sbindir="${TARGET_PREFIX}/tbin" \
      --prefix="${TARGET_PREFIX}"

    make -j"$(nproc)"

    inotifywait -m -r -q -e create,modify,moved_to --exclude ".*(/man|/share/man|/share/doc|/share/gtk-doc).*" --format '%w%f' "$TARGET_PREFIX" > "/tmp/libxml2.log" & INOTIFY_PID=$!
    sleep 0.7

    make -j1 install

    sleep 0.7
    kill $INOTIFY_PID && wait $INOTIFY_PID || true

    echo "== Found libxml2 files:"
    sort -u /tmp/libxml2.log

    mkdir -pv "/out"
    if [ -f "/tmp/libxml2.log" ]; then
        sort -u "/tmp/libxml2.log" | while IFS= read -r file_path; do
            # Ensure the path is not empty and exists
            if [ -n "$file_path" ] && [ -e "$file_path" ]; then
                cp -v --parents -dpR "$file_path" /out/
            fi
        done
    fi
    echo "== Copied libxml2 files:"
    find /out/
EOF

FROM base AS release
# Install the Rust toolchain and `musl` target.
ARG RUST_CHANNEL=stable
ARG RUSTC_HASH=
RUN <<EOF
    echo "Triggering Rust install for channel '${RUST_CHANNEL}' and rustc-hash '${RUSTC_HASH}'."

    # `--target` to musl so that our users don't need to keep overriding it manually.
    # `--profile minimal` to reduce the image size, we do not need to cargo/rust manual within docker
    ${CURL_CMD} --proto '=https' --tlsv1.2 https://sh.rustup.rs | \
      bash -s -- -y \
        --profile minimal \
        --no-modify-path \
        --component rustfmt,clippy \
        --default-toolchain "${RUST_CHANNEL}" \
        --target "${RUST_MUSL_CROSS_TARGET}"

    # Truncate all files within the share folder, since we do not need them, but removing them prevents us from installing or updating toolchains
    find "${RUSTUP_HOME}/toolchains/${RUST_CHANNEL}-$(uname -m)-unknown-linux-gnu/share/" -type f -exec truncate -s0 {} \;

    # When the Rust channel is stable, we create a symlink to the stable folder with the version number
    # This prevents cargo from downloading the same stuff twice if someone overrules the version with a version number instead of stable
    if [[ "${RUST_CHANNEL}" == "stable" ]]; then
      STABLE_VER=$(rustc -V | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]")
      ln -vfsr "${RUSTUP_HOME}/toolchains/stable-$(uname -m)-unknown-linux-gnu" "${RUSTUP_HOME}/toolchains/${STABLE_VER}-$(uname -m)-unknown-linux-gnu"
    fi

    tee "${CARGO_HOME}/config.toml" <<TOML_EOF
[build]
target = "${RUST_MUSL_CROSS_TARGET}"
rustflags = [
    "-Ctarget-feature=+crt-static",
    "-Clink-self-contained=yes",
    "-Cprefer-dynamic=no",
    "-L${TARGET_PREFIX}/lib",
    "-L${SYSROOT}/lib"
]

[target.${RUST_MUSL_CROSS_TARGET}]
linker = "${RUST_MUSL_CROSS_TARGET}-ld"
TOML_EOF

    #
    # Link the strip command to musl-strip which is more widely used as the default strip command
    ln -sfnr "${TARGET_PREFIX}/bin/${TARGET}-strip" "${TARGET_PREFIX}/bin/musl-strip"
    #
    # Add some compatibility links to the new CARGO_HOME and RUSTUP_HOME directories
    # Without these it might break current CI's using this image
    ln -sfnr "${CARGO_HOME}" /root/.cargo
    ln -sfnr "${RUSTUP_HOME}" /root/.rustup
EOF

COPY --link --from=build-pq15 ${TARGET_PREFIX}/pq15 ${TARGET_PREFIX}/pq15
COPY --link --from=build-pq16 ${TARGET_PREFIX}/pq16 ${TARGET_PREFIX}/pq16
COPY --link --from=build-pq17 ${TARGET_PREFIX}/pq17 ${TARGET_PREFIX}/pq17
COPY --link --from=build-sqlite /out/ /
COPY --link --from=build-mariadb /out/ /
COPY --link --from=build-libxml2 /out/ /

ENV HOST="x86_64-unknown-linux-gnu" \
    # General
    CARGO_BUILD_TARGET="${TARGET}" \
    BINDGEN_EXTRA_CLANG_ARGS="--sysroot=${SYSROOT} ${SHARED_CPPFLAGS}" \
    TARGET_C_INCLUDE_PATH="${SHARED_CPPFLAGS}" \
    PKG_CONFIG_ALLOW_CROSS=1 \
    PKG_CONFIG_ALL_STATIC=1 \
    TARGET_PKG_CONFIG_ALLOW_CROSS=1 \
    TARGET_PKG_CONFIG_PATH="${PKG_CONFIG_PATH}" \
    TARGET_PKG_CONFIG_LIBDIR="${PKG_CONFIG_LIBDIR}" \
    # pq-sys (PosgreSQL) support
    PQ_LIB_STATIC=1 \
    PQ_LIB_DIR="${TARGET_PREFIX}/pq16/lib" \
    # openssl-sys support
    OPENSSL_STATIC=1 \
    OPENSSL_DIR="${TARGET_PREFIX}" \
    OPENSSL_LIB_DIR="${TARGET_PREFIX}/lib" \
    OPENSSL_INCLUDE_DIR="${TARGET_PREFIX}/include" \
    DEP_OPENSSL_INCLUDE="${TARGET_PREFIX}/include" \
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
    SSL_CERT_DIR=/etc/ssl/certs \
    # Rust libz-sys support
    LIBZ_SYS_STATIC=1 \
    ZLIB_STATIC=1 \
    # Rust curl-sys support
    LIBCURL_STATIC=1 \
    # Rust mysqlclient-sys support
    MYSQLCLIENT_STATIC=1 \
    # Rust libsqlite3-sys support
    SQLITE3_STATIC=1 \
    SQLITE3_LIB_DIR="${TARGET_PREFIX}/lib" \
    SQLITE3_INCLUDE_DIR="${TARGET_PREFIX}/include" \
    # Rust libxml2 support
    LIBXML_2.0_STATIC=1 \
    # If the ARCH_CPPFLAGS is set, we probably also need to pass it on to Rust.
    # For example aarch64 needs `-mno-outline-atomic` set during builds.
    # Here we pass-on the ARCH_CPPFLAGS so that Rust is able to use the same
    # Also set the correct library path to make sure all pre-build libraries will be found.
    # And some hardening flags, the same as used above to keep the binary as secure as possible.
    TARGET_CPPFLAGS="${SHARED_CPPFLAGS}" \
    TARGET_CFLAGS="--sysroot=${SYSROOT} -fstack-clash-protection -fstack-protector-strong -fPIE -pie -fpie --static -ffunction-sections -fdata-sections -Wl,-gc-sections -Wl,-pie -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -Wl,--sort-common -Wl,-z,pack-relative-relocs -Wa,--noexecstack -L${TARGET_PREFIX}/lib -L${SYSROOT}/lib ${ARCH_CPPFLAGS}" \
    TARGET_CXXFLAGS="--sysroot=${SYSROOT} -fstack-clash-protection -fstack-protector-strong -fPIE -pie -fpie --static -ffunction-sections -fdata-sections -Wl,-gc-sections -Wl,-pie -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -Wl,--sort-common -Wl,-z,pack-relative-relocs -Wa,--noexecstack -L${TARGET_PREFIX}/lib -L${SYSROOT}/lib ${ARCH_CPPFLAGS}" \
    # Tell some crates that we are cross compiling
    CROSS_COMPILE=1

WORKDIR /home/rust/src

LABEL org.opencontainers.image.authors="BlackDex <black.dex@gmail.com>"
LABEL org.opencontainers.image.documentation="https://github.com/BlackDex/rust-musl/"
LABEL org.opencontainers.image.licenses="Apache License 2.0"
LABEL org.opencontainers.image.url="https://github.com/BlackDex/rust-musl/"
LABEL org.opencontainers.image.description="MUSL Cross Build Base Image for Rust ${TARGET} with ZLib, OpenSSL, cURL, PostgreSQL (v15,v16,v17) , SQLite, MariaDB and LibXML2 static libraries"
