# syntax=docker/dockerfile:1

# Which Toolchain Tag to use
ARG IMAGE_TAG=x86_64-musl

# Extract the pre-build toolchain from the musl-toolchain image
# This doesn't need to be build everytime since not much will change
FROM blackdex/musl-toolchain:${IMAGE_TAG} AS musl-toolchain

# Start building the musl-base
FROM ubuntu:22.04

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    TERM=xterm-256color \
    PATH="/usr/local/musl/bin:/root/.cargo/bin:${PATH}" \
    TZ=UTC

# hadolint ignore=DL3008
RUN apt-get update && \
    apt-get install -y \
        autoconf \
        automake \
        build-essential \
        cmake \
        libtool \
        pkg-config \
        curl \
        file \
        git \
        tzdata \
        ca-certificates \
        --no-install-recommends \
        && \
    # Cleanup apt
    apt-get clean -y && \
    rm -rf /var/cache/* /var/lib/apt/lists/* && \
    # Default cleanups
    find /var/log -type f -delete

# Define the target and openssl architecture to use during build
ARG TARGET=x86_64-unknown-linux-musl
ARG OPENSSL_ARCH=linux-x86_64
ARG OPENSSL_VERSION="1.1.1s"
ARG ARCH_CPPFLAGS=

ENV TARGET="${TARGET}" \
    TARGET_PREFIX=/usr/local/musl \
    TARGET_PKG_CONFIG_PATH=/usr/local/musl/lib/pkgconfig \
    TARGET_LD="${TARGET}-ld" \
    TARGET_AR="${TARGET}-ar" \
    TARGET_CC="${TARGET}-gcc" \
    TARGET_CXX="${TARGET}-g++" \
    TARGET_RANLIB="${TARGET}-ranlib" \
    TARGET_LDFLAGS="-flto -s -pie -static -L/usr/local/musl/lib" \
    RUST_MUSL_CROSS_TARGET="${TARGET}" \
    SYSROOT="/usr/local/musl/${TARGET}" \
    # Library versions
    SSL_VER="${OPENSSL_VERSION}" \
    CURL_VER="7.87.0" \
    ZLIB_VER="1.2.13" \
    PQ_11_VER="11.18" \
    PQ_15_VER="15.1" \
    SQLITE_VER="3400100" \
    MARIADB_VER="3.3.3"

WORKDIR /tmp

RUN mkdir -p "${TARGET_PREFIX}/tbin" /home/rust/src
COPY --from=musl-toolchain "/usr/local/musl/${TARGET}" "${TARGET_PREFIX}"

# Build zlib (used in openssl, curl, pq, sqlite and mariadb)
# hadolint ignore=DL3003
RUN echo "zlib" && \
    curl -sSL "https://zlib.net/zlib-${ZLIB_VER}.tar.gz" | tar xz && \
    cd "zlib-${ZLIB_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIE -pie -static --static" \
    ./configure \
      --static \
      --prefix="${TARGET_PREFIX}" && \
    make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "zlib-${ZLIB_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Build OpenSSL (used in curl, pq and mariadb)
# hadolint ignore=DL3003
RUN echo "OpenSSL" && \
    curl -sSL "https://www.openssl.org/source/openssl-${SSL_VER}.tar.gz" | tar xz && \
    cd "openssl-${SSL_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIC -pie -static --static" \
    ./Configure \
      ${OPENSSL_ARCH} \
      no-dso \
      no-shared \
      no-ssl3 \
      no-rc5 \
      no-md2 \
      no-mdc2 \
      no-idea \
      no-unit-test \
      no-comp \
      no-zlib \
      no-zlib-dynamic \
      no-async \
      -fPIC -pie -static --static \
      --openssldir="${TARGET_PREFIX}/ssl" \
      --libdir="${TARGET_PREFIX}/lib" \
      --prefix="${TARGET_PREFIX}" && \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" make -j"$(nproc)" depend && \
    make -j"$(nproc)" && \
    make install_sw install_ssldirs && \
    cd /tmp && rm -rf "openssl-${SSL_VER}" && \
    # Move the compiled binaries out off the main musl bin to tbin
    mv -t "${TARGET_PREFIX}/tbin" "${TARGET_PREFIX}/bin/openssl" "${TARGET_PREFIX}/bin/c_rehash" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Build curl (needs with-zlib and all this stuff to allow https)
# hadolint ignore=DL3003
RUN echo "libcurl" && \
    curl -sSL "https://curl.se/download/curl-${CURL_VER}.tar.gz" | tar xz && \
    cd "curl-${CURL_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIE -pie -static --static" \
    ./configure \
      --with-sysroot="${SYSROOT}" \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --disable-shared \
      --enable-static \
      --enable-ipv6 \
      --with-zlib \
      --with-openssl \
      --disable-ldap \
      --enable-optimize \
      --with-ca-path=/etc/ssl/certs/ \
      --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
      --with-ca-fallback \
      --prefix="${TARGET_PREFIX}" && \
    make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "curl-${CURL_VER}" && \
    # Move the compiled binaries out off the main musl bin to tbin
    mv -t "${TARGET_PREFIX}/tbin" "${TARGET_PREFIX}/bin/curl" "${TARGET_PREFIX}/bin/curl-config" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Build libpq v11
# hadolint ignore=DL3003
RUN echo "PostgreSQL v11" && \
    curl -sSL "https://ftp.postgresql.org/pub/source/v${PQ_11_VER}/postgresql-${PQ_11_VER}.tar.gz" | tar xz && \
    cd "postgresql-${PQ_11_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIE -pie -static --static" \
   ./configure \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --without-readline \
      --with-openssl \
      --disable-rpath \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${TARGET_PREFIX}" && \
    # build libpq only
    cd src/interfaces/libpq && \
      make -j"$(nproc)" all-static-lib && \
      make -j"$(nproc)" install-lib-pc install-lib-static && \
    cd /tmp && rm -rf "postgresql-${PQ_11_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Build libpq v15
# hadolint ignore=DL3003
RUN echo "PostgreSQL v15" && \
    curl -sSL "https://ftp.postgresql.org/pub/source/v${PQ_15_VER}/postgresql-${PQ_15_VER}.tar.gz" | tar xz && \
    cd "postgresql-${PQ_15_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIE -pie -static --static" \
   ./configure \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --without-readline \
      --with-openssl \
      --disable-rpath \
      --with-system-tzdata=/usr/share/zoneinfo \
      --prefix="${TARGET_PREFIX}/pq15" && \
    # build common, port and libpq only
    cd src/common && \
      make -j"$(nproc)" all && \
      make -j"$(nproc)" install && \
    cd ../../src/port && \
      make -j"$(nproc)" all && \
      make -j"$(nproc)" install && \
    cd ../../src/interfaces/libpq && \
      make -j"$(nproc)" all-static-lib && \
      make -j"$(nproc)" install-lib-pc install-lib-static && \
    # Merge these libraries so pq-sys will work without using pkg-config
    cd "${TARGET_PREFIX}/pq15/lib" && \
      mkdir -v merge && cd merge && \
      # Extract the generated .a files
      "${TARGET_AR}" x ../libpq.a && \
      "${TARGET_AR}" x ../libpgcommon.a && \
      "${TARGET_AR}" x ../libpgport.a && \
      # Merge all these files again into one libpq.a file
      "${TARGET_AR}" csr libpq.a *.o && \
      # Move and cleanup
      mv -vf libpq.a ../libpq.a && \
      cd ../ && rm -rf merge pkgconfig libpgcommon* libpgport* && \
    # Remove the source
    cd /tmp && rm -rf "postgresql-${PQ_15_VER}" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/pq15/share/man"

# Build libsqlite3
# hadolint ignore=DL3003
RUN echo "SQLite3" && \
    curl -sSL "https://www.sqlite.org/2022/sqlite-autoconf-${SQLITE_VER}.tar.gz" | tar xz && \
    cd "sqlite-autoconf-${SQLITE_VER}" && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -flto -ffat-lto-objects -fPIE -pie -static --static" \
    CFLAGS="-DSQLITE_CORE -D_POSIX_THREAD_SAFE_FUNCTIONS -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_API_ARMOR -DSQLITE_DEFAULT_FOREIGN_KEYS=1 -DHAVE_USLEEP=1 -DSQLITE_ENABLE_MEMORY_MANAGEMENT" \
    CFLAGS+=" -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_SOUNDEX -DSQLITE_ENABLE_RTREE" \
    CFLAGS+=" -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_USE_URI -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_MAX_VARIABLE_NUMBER=250000 -DSQLITE_MAX_EXPR_DEPTH=10000" \
    ./configure \
      --with-sysroot="${SYSROOT}" \
      --host="${TARGET}" \
      --target="${TARGET}" \
      --disable-shared \
      --enable-static \
      --enable-threadsafe \
      --enable-fts3 \
      --enable-fts4 \
      --enable-fts5 \
      --enable-rtree \
      --enable-dynamic-extensions \
      --prefix="${TARGET_PREFIX}" && \
    # rpath removal - Same as Alpine
    sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool && \
    sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool && \
    make && make install && \
    cd /tmp && rm -rf "sqlite-autoconf-${SQLITE_VER}" && \
    # Move the compiled binaries out off the main musl bin to tbin
    mv -t "${TARGET_PREFIX}/tbin" "${TARGET_PREFIX}/bin/sqlite3" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Building MariaDB
# It seems that MariaDB has some issues when compiled with LTO enabled https://jira.mariadb.org/browse/MDEV-25633
# Therefor i will not compile MariaDB with LTO, but -O2 should help a bit in getting some better performance.
# Also, building v3.3.1 works fine, but there seems to be a linking issue when using mysqlclient-sys, there we will stay at v3.2.x
# hadolint ignore=DL3003
RUN echo "MariaDB Connector/C" && \
    curl -sSL "https://archive.mariadb.org/connector-c-${MARIADB_VER}/mariadb-connector-c-${MARIADB_VER}-src.tar.gz" | tar xz && \
    cd "mariadb-connector-c-${MARIADB_VER}-src" && \
    mkdir build && cd build && \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    AR="${TARGET_AR}" \
    LD="${TARGET_LD}" \
    RANLIB="${TARGET_RANLIB}" \
    LDFLAGS="${TARGET_LDFLAGS}" \
    CPPFLAGS="-I${TARGET_PREFIX}/include ${ARCH_CPPFLAGS}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" \
    CC="${TARGET_CC} -O2 -fPIE -pie -static --static" \
    cmake \
      -DCMAKE_IGNORE_PATH="/usr/include" \
      -DCMAKE_INSTALL_PREFIX="${TARGET_PREFIX}" \
      -DCMAKE_SYSTEM_NAME=Linux \
      -DCMAKE_HOST_SYSTEM_NAME=Linux \
      -DINSTALL_LIBDIR=lib \
      -DINSTALL_INCLUDEDIR=include/mysql \
      -DCMAKE_BUILD_TYPE=MINSIZEREL \
      -DWITH_EXTERNAL_ZLIB=OFF \
      -DWITH_SSL=OPENSSL \
      -DWITH_MYSQLCOMPAT=ON \
      -DWITH_UNIT_TESTS=OFF \
      -DCLIENT_PLUGIN_DIALOG=STATIC \
      -DCLIENT_PLUGIN_MYSQL_CLEAR_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CACHING_SHA2_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_SHA256_PASSWORD=STATIC \
      -DCLIENT_PLUGIN_CLIENT_ED25519=STATIC \
      -DCLIENT_PLUGIN_REMOTE_IO=OFF \
      -DDEFAULT_CHARSET=utf8mb4 \
    ../ && \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include" make -j"$(nproc)" && make install && \
    cd /tmp && rm -rf "mariadb-connector-c-${MARIADB_VER}-src" && \
    # Move the compiled binaries out off the main musl bin to tbin
    mv -t "${TARGET_PREFIX}/tbin" "${TARGET_PREFIX}/bin/mariadb_config" && \
    # Create some compatibilty symlinks so pkg-config and diesel can find all the correct files
    ln -sfnr "${TARGET_PREFIX}/include/mysql/mariadb_version.h" "${TARGET_PREFIX}/include/mysql/mysql_version.h" && \
    # Create and fix the default pkg-config for mysqlclient using the libmariadb generated file
    # We need the library to point to mysqlclient instead of mariadb, else mysqlclient-sys crate will not link it statically!
    sed "s#Name: libmariadb#Name: mysqlclient#g" "${TARGET_PREFIX}/lib/pkgconfig/libmariadb.pc" | \
      sed "s#${TARGET_PREFIX}/lib/lib##g" | \
      sed 's#\.a##g' | \
      sed 's#-ldl\s##g' | \
      sed 's#-lmariadb#-lmysqlclient#g' > "${TARGET_PREFIX}/lib/pkgconfig/mysqlclient.pc" && \
    # Default cleanups
    find /var/log -type f -delete && rm -rf "${TARGET_PREFIX}/share/man"

# Install the Rust toolchain and `musl` target.
ARG RUST_CHANNEL=stable
ARG RUSTC_HASH=

# Chmod 755 is set for root directory to allow access execute binaries in /root/.cargo/bin
RUN chmod 755 /root/ && \
    echo "Triggering Rust install for channel '${RUST_CHANNEL}' and rustc-hash '${RUSTC_HASH}'." && \
    # `--target` to musl so that our users don't need to keep overriding it manually.
    # `--profile minimal` to reduce the image size, we do not need to cargo/rust manual within docker
    curl --proto '=https' --tlsv1.2 -sqSf https://sh.rustup.rs | \
      sh -s -- -y --profile minimal --default-toolchain "${RUST_CHANNEL}" --target "${RUST_MUSL_CROSS_TARGET}" && \
    rustup set profile minimal && \
    # Truncate all files within the share folder, since we do not need them, but removing them prevents us from installing or updating toolchains
    find "/root/.rustup/toolchains/${RUST_CHANNEL}-$(uname -m)-unknown-linux-gnu/share/" -type f -exec truncate -s0 {} \; && \
    # When the Rust channel is stable, we create a symlink to the stable folder with the version number
    # This prevents cargo from downloading the same stuff twice if someone overrules the version with a version number instead of stable
    if [[ "${RUST_CHANNEL}" == "stable" ]] ; then STABLE_VER=$(rustc -V | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]") ; ln -vfsr "/root/.rustup/toolchains/stable-$(uname -m)-unknown-linux-gnu" "/root/.rustup/toolchains/${STABLE_VER}-$(uname -m)-unknown-linux-gnu" ; fi && \
    echo -ne "[build]\ntarget = \"$RUST_MUSL_CROSS_TARGET\"\n\n[target.$RUST_MUSL_CROSS_TARGET]\nlinker = \"$RUST_MUSL_CROSS_TARGET-ld\"\n\n" > /root/.cargo/config && \
    #
    # Link the strip command to musl-strip which is more widely used as the default strip command
    ln -sfnr "${TARGET_PREFIX}/bin/${TARGET}-strip" "${TARGET_PREFIX}/bin/musl-strip"

ENV HOST="x86_64-unknown-linux-gnu" \
    # General
    CARGO_BUILD_TARGET="${TARGET}" \
    BINDGEN_EXTRA_CLANG_ARGS="--sysroot=${SYSROOT}" \
    C_INCLUDE_PATH="${TARGET_PREFIX}/include:${SYSROOT}/include" \
    TARGET_C_INCLUDE_PATH="${TARGET_PREFIX}/include:${SYSROOT}/include" \
    PKG_CONFIG_ALLOW_CROSS=1 \
    PKG_CONFIG_ALL_STATIC=1 \
    PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    PKG_CONFIG_LIBDIR="${TARGET_PKG_CONFIG_PATH}" \
    TARGET_PKG_CONFIG_ALLOW_CROSS=1 \
    TARGET_PKG_CONFIG_PATH="${TARGET_PKG_CONFIG_PATH}" \
    TARGET_PKG_CONFIG_LIBDIR="${TARGET_PKG_CONFIG_PATH}" \
    # pq-sys (PosgreSQL) support
    PQ_LIB_STATIC=1 \
    PQ_LIB_DIR="${TARGET_PREFIX}/lib" \
    # openssl-sys support
    OPENSSL_STATIC=1 \
    OPENSSL_DIR="${TARGET_PREFIX}" \
    OPENSSL_LIB_DIR="${TARGET_PREFIX}/lib" \
    OPENSSL_INCLUDE_DIR="${TARGET_PREFIX}/include" \
    DEP_OPENSSL_INCLUDE="${TARGET_PREFIX}/include" \
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
    SSL_CERT_DIR=/etc/ssl/certs \
    # Rust libz-sys support
    LIBZ_SYS_STATIC=1 \
    ZLIB_STATIC=1 \
    # Rust curl-sys support
    LIBCURL_STATIC=1 \
    # Rust mysqlclient-sys support
    MYSQLCLIENT_STATIC=1 \
    # Rust libsqlite3-sys support
    SQLITE3_STATIC=1 \
    SQLITE3_LIB_DIR="${TARGET_PREFIX}/lib" \
    SQLITE3_INCLUDE_DIR="${TARGET_PREFIX}/include" \
    # If the ARCH_CPPFLAGS are set, we probably also need to pass them on to Rust.
    # For example aarch64 needs `-mno-outline-atomic` set during builds.
    # Here we pass-on the ARCH_CPPFLAGS so that Rust is able to use the same
    TARGET_CFLAGS="${ARCH_CPPFLAGS}" \
    # Tell some crates that we are cross compiling
    CROSS_COMPILE=1

WORKDIR /home/rust/src

LABEL maintainer="BlackDex <black.dex@gmail.com>"
LABEL org.opencontainers.image.create="$(date --utc --iso-8601=seconds)"
LABEL org.opencontainers.image.documentation="https://github.com/BlackDex/rust-musl/"
LABEL org.opencontainers.image.licenses="Apache License 2.0"
LABEL org.opencontainers.image.url="https://hub.docker.com/r/blackdex/rust-musl/"
